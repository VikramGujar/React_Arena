Class Components
- Pure Component
- React Component
- Render Method
- State in Class Component
    this.state = { }
    this.setState({ })
- Component Did Mount
- Style Binding
    <div  style={ {key:value } }>
- Class Binding
    <div className={ }>
- Data Binding
    <p> { } </p>
                     Events in Class Component
- Events are subscribed to methods in class.
- All Synthetic Events are same as you have used in Function Component.

Syntax:
        class  Login extends  React.Component
        {
              ....
              handleLoginClick()
              {
              }
              render() {
               return(
                 <div>
                    <button onClick={this.handleLoginClick}> </button>
                 </div>
                )
               }
        }

- Event arguments are defined using "event" parameter, which provides access to element and event details.
   
        handleLoginClick(e)
        {
            e.clientX;
            e.target.id;
            e.target.name;
            ....
        }

Ex:
 admin-login.jsx

import axios from "axios";
import React from "react";


export class AdminLogin extends React.Component
{
      constructor(){
         super();
      }

      handleLoginClick(e){
         alert('Login Success');
         console.log(`Id=${e.target.id}\nName=${e.target.name}\nX=${e.clientX}`);
      }

      render(){
        return(
            <div className="container-fluid">
                <h2>Events</h2>
                <button onClick={this.handleLoginClick} id="btnLogin" name="Login-Button">Login</button>
            </div>
        )
      }
}

Note: Events configured in class are subscribed to methods in class.
      If methods are using state then it is mandatory to register method and bind to    
      class while creating instance of component class.

Syntax:

       constructor() {
        super();
        this.state = { }
        this.handleLoginClick = this.handleLoginClick.bind(this);
        }

FAQ: Why method can't use state?
Ans:   State is configured before method is registered. Hence state can't recognize
       methods that are configured after creating component object.

FAQ: Can we use event subscriber without registering inside constructor?
Ans:  Yes. You can bind and register a method only when event is trigged.

   
      <button onClick={this.handleLoginClick.bind(this)}>  


FAQ: Can we register and use subscriber methods without bind()?
Ans:  Yes. By keeping the memory allocated for method alive event after the method
      end. You can keep memory alive by returning method as a result of event.


Syntax:
    <button onClick={()=> this.handleLoginClick() }>

Ex:
admin-login.jsx

import axios from "axios";
import React from "react";


export class AdminLogin extends React.Component
{
      constructor(){
         super();
         this.state = {
            msg:"Click Login"
         }
         this.handleLoginClick = this.handleLoginClick.bind(this);
         
      }

      handleLoginClick(){
        this.setState({msg: 'Login Success..'});
      }

      handleCancelClick(){
         this.setState({msg: 'Canceled..'});
      }

      handleContinueClick(){
         this.setState({msg: 'Continue with OTP'});
      }

      render(){
        return(
            <div className="container-fluid">
                <h2>Events</h2>
                <button onClick={this.handleLoginClick} id="btnLogin" name="Login-Button">Login</button>
                <button onClick={this.handleCancelClick.bind(this)}>Cancel</button>
                <button onClick={()=> this.handleContinueClick()} >Continue</button>
                <p>{this.state.msg}</p>
            </div>
        )
      }
}
                        Forms in Class Component
- You can't use any library that requires and uses hooks.
- You can use any library that provides pre-defined components for handling forms.
- Formik Library provides components like
   
        <Formik>
        <Form>
        <Field>
        <ErrorMessage>

- You can use "Yup" for validation in formik component.

Ex:
admin-login.jsx

import axios from "axios";
import { ErrorMessage, Field, Form, Formik } from "formik";
import React from "react";
import * as yup from "yup";


export class AdminLogin extends React.Component
{
      constructor(){
         super();
      }


      render(){
        return(
            <div className="container-fluid">
                <h2>Admin Login</h2>
                <Formik initialValues={{UserName:'', Password:''}} onSubmit={(values)=>{console.log(values)}} validationSchema={yup.object({UserName: yup.string().required('User Name Required'), Password: yup.string().required('Password Required')})} >
                    <Form>
                        <dl>
                            <dt>User Name</dt>
                            <dd> <Field type="text" name="UserName" /> </dd>
                            <dd className="text-danger"> <ErrorMessage name="UserName" /> </dd>
                            <dt>Password</dt>
                            <dd> <Field type="password" name="Password" /> </dd>
                            <dd className="text-danger"> <ErrorMessage name="Password" /> </dd>
                        </dl>
                        <button type="submit">Login</button>
                    </Form>
                </Formik>
            </div>
        )
      }
}

- Controlled Components using Class
- Component Life Cycle

                        TypeScript