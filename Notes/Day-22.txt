React Formik Library
Custom Validation

                        React Yup Library
- Yup is a validation schema library.
- It can be used with any JavaScript based libraries.
- It provides pre-defined validation services.
- Service is a pre-defined business logic, which you can customize and implement according to the requirements.

1. Install Yup library for project

        > npm  install yup --save

2. Import services from yup

    import  { required, min, max,.. }  from "yup";
                      (or)
    import * as yup from "yup";

3. Configure validation schema for formik using "yup.object()".


    const formik = useFormik({
       
            initialValues: { },
            validationSchema: yup.object({
                field : yup.datatype().required('msg').min(n, 'msg').max(n, 'msg'),
                field : ..
            })
    })


4. All validation errors are accessible using "formik.errors".

        { formik.errors.fieldname }

Ex:
 form-demo.jsx

import { useState } from "react";
import { useFormik } from "formik";
import * as yup from "yup";



export function ReactForm(){

   
   
    const formik = useFormik({
        initialValues: {
            UserName: '',
            Age: 0,
            Mobile: '',
            City: '',
            Gender: ''
        },
        validationSchema: yup.object({
             UserName: yup.string().required('Name Required').min(4, 'Name too short'),
             Age: yup.number().min(15, 'Minimum age is 15').max(30,'Maximum age is 30'),
             Mobile: yup.string().required('Mobile Required').matches(/\+91\d{10}/, 'Invalid Mobile')
        }),
        onSubmit: (values) => {
            console.log(values);
        }
    })

    return(
        <div className="container-fluid">
            <form onSubmit={formik.handleSubmit}>
                <h3>Register User</h3>
                <dl>
                    <dt>User Name</dt>
                    <dd><input type="text" onChange={formik.handleChange} name="UserName" /></dd>
                    <dd className="text-danger">{formik.errors.UserName}</dd>
                    <dt>Age</dt>
                    <dd><input type="text" name="Age" onChange={formik.handleChange} /></dd>
                    <dd className="text-danger">{formik.errors.Age}</dd>
                    <dt>Mobile</dt>
                    <dd><input type="text" name="Mobile" onChange={formik.handleChange}  /></dd>
                    <dd className="text-danger">{formik.errors.Mobile}</dd>
                    <dt>City</dt>
                    <dd>
                        <select name="City" onChange={formik.handleChange} >
                            <option value="-1">Select City</option>
                            <option value="Delhi">Delhi</option>
                            <option value="Hyd">Hyd</option>
                        </select>
                    </dd>
                    <dd className="text-danger">{formik.errors.City}</dd>
                    <dt>Gender</dt>
                    <dd>
                        <input onChange={formik.handleChange} type="radio" name="Gender" value="Male" /> <label>Male</label>
                        <input onChange={formik.handleChange} type="radio" name="Gender" value="Female" /> <label>Female</label>
                    </dd>
                    <dd className="text-danger">{formik.errors.Gender}</dd>
                </dl>
                <button type="submit">Register</button>
            </form>
        </div>
    )
}









- Formik uses various events for validation.
    a) onSubmit            : on form submit
    b) onChange            : on value change in element
    c) onBlur                : on lost focus

- If you want the validation for blur then you have to configure "formik.onblur"

<input type="text" onChange={formik.handleChange}  onBlur={formik.handleBlur} />


- If you want multiple events to validate any element then you can use "formik" spread operator that can access all field properties.

Syntax:
 <input type="text" name="UserName"   {...formik.getFieldProps("UserName") } />

 <select  name="City"  {...formik.getFieldProps("City") }>

- Formik provides built-in components for configuring and validating form.
- These components simplify the design and functionality.
- You can't use "hooks" in class components, hence formik components play key role in class components.
- Formik components are
       
            <Formik>
            <Form>
            <Field>
            <ErrorMessage>

Syntax:
    <Formik  initialvalues={}   validationSchema={}   validate={}  onSubmit={}>

        <Form>

            <Field  type|as = "element" />
            <ErrorMessage />

        </Form>

    </Formik>

Ex:
formik-demo.jsx

import { Formik, Form, Field, ErrorMessage } from "formik";
import * as yup from "yup";

export function FormikDemo(){
    return(
        <div className="container-fluid">
            <h3>Register User</h3>
            <Formik initialValues={{UserName:'', Age:0, Mobile:''}} validationSchema={yup.object({UserName:yup.string().required('Name Required'), Age:yup.number().required('Age Required'), Mobile: yup.string().required('Mobile Required').matches(/\+91\d{10}/,'Invalid Mobile')})} onSubmit={(values)=>{ console.log(values) }} >
                <Form>
                    <dl>
                        <dt>User Name</dt>
                        <dd> <Field type="text" name="UserName" /> </dd>
                        <dd className="text-danger"> <ErrorMessage name="UserName" /> </dd>
                        <dt>Age</dt>
                        <dd> <Field type="number" name="Age" /> </dd>
                        <dd className="text-danger"> <ErrorMessage name="Age" />  </dd>
                        <dt>Mobile</dt>
                        <dd><Field type="text" name="Mobile" /></dd>
                        <dd className="text-danger"> <ErrorMessage name="Mobile" /> </dd>
                    </dl>
                    <button type="submit">Register</button>
                </Form>
            </Formik>
        </div>
    )
}

- Formik library provides 2 validation states.

    a) Input State Validation
    b) Form State Validation

- Input state validation verifies every field individually.
- Form state validation verifies all field simultaneously at the same time.
- Form state allows to verify
    a) form values
    b) form state [ valid, invalid, pristine, dirty ]

Syntax:
        <Formik>
            {
            formik  => <Form> </Form>
            }    
        </Formik>

        formik.isValid            all fields are valid
        formik.dirty            any one field modified
        formik.pristine         form is untouched
        formik.errors            returns all errors

Ex:
import { Formik, Form, Field, ErrorMessage } from "formik";
import * as yup from "yup";

export function FormikDemo(){
    return(
        <div className="container-fluid">
            <h3>Register User</h3>
            <Formik initialValues={{UserName:'', Age:0, Mobile:''}} validationSchema={yup.object({UserName:yup.string().required('Name Required'), Age:yup.number().required('Age Required'), Mobile: yup.string().required('Mobile Required').matches(/\+91\d{10}/,'Invalid Mobile')})} onSubmit={(values)=>{ console.log(values) }} >
                {
                    form =>
                        <Form>
                        <dl>
                            <dt>User Name</dt>
                            <dd> <Field type="text" name="UserName" /> </dd>
                            <dd className="text-danger"> <ErrorMessage name="UserName" /> </dd>
                            <dt>Age</dt>
                            <dd> <Field type="number" name="Age" /> </dd>
                            <dd className="text-danger"> <ErrorMessage name="Age" />  </dd>
                            <dt>Mobile</dt>
                            <dd><Field type="text" name="Mobile" /></dd>
                            <dd className="text-danger"> <ErrorMessage name="Mobile" /> </dd>
                        </dl>
                        <button type="submit" className="me-2" disabled={!form.isValid} >Register</button>
                        <button className={(form.dirty)?'d-inline':'d-none'} >Save</button>
                        <h4>Check the following Errors</h4>
                         <ul>
                            {
                                Object.keys(form.errors).map(property=>
                                    <li key={property}> {form.errors[property]} </li>
                                )
                            }
                         </ul>
                        </Form>
                }
            </Formik>
        </div>
    )
}