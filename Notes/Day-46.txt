Contracts
    - interface
Templates
    - abstract class
Components
    - class

                               Generics            
       
- Generic is used to configure "type safe" component or property.
- It is open to handle any type of data, and makes it strongly typed once it knows the data type of value.
- Typescript allows generic
    a) method
    b) function
    c) parameter
    d) class
    e) property  etc..

- Generic type is defined by using "<T>" type reference.

Syntax:
       function Name<T>(param: T): T
       {
           return  param | expression;
       }

Ex:
function Print<T>(param:T):void{
    console.log(`Param=${param}`);
}

Print<number>(30);
Print<string>("A");
Print<string[]>(["A","B"]);

Ex: Generic Class & Property

interface IOracle
{
    UserName:string;
    Password:string;
    Database:string;
}
interface IMongoDB
{
    URL:string;
}

class Database<T>
{
    public connectionString:T|undefined;
    public Print():void{
        for(var property in this.connectionString){
            console.log(`${property} : ${this.connectionString[property]}`);
        }
    }
}

let oracle = new Database<IOracle>();
oracle.connectionString = {UserName:'scott', Password:'tiger', Database:'stu'};
oracle.Print();

let mongodb = new Database<IMongoDB>();
mongodb.connectionString = {URL: 'mongodb://127.0.0.1:27017'};
mongodb.Print();

Ex:

interface IProduct
{
    Name:string;
    Price:number;
}
interface IEmployee
{
    FirstName:string;
    LastName:string;
    Designation:string;
}

class FetchData<T>
{
     public Response<T>(data:T){
         console.log(data);
     }
}

let product = new FetchData<IProduct>();
product.Response<IProduct>({Name: 'TV', Price:55000});
product.Response<IProduct[]>([{Name:'Mobile', Price:30000}, {Name:'Watch', Price: 13000}]);

- You can't use operators on generic types.
- Generics are always handled by using methods or functions.

Syntax:
        function Add<T>(a:T, b:T) : T
        {
           return  a + b;    // invalid
        }

Ex:
function Sum(a:any,b:any){
    return a + b;
}

function Addition<T>(a:T, b:T):T
{
    return Sum(a,b);
}

console.log(`Addition=${Addition<number>(40,20)}`);


                        Enumeration [Enum]
- It is a collection of constants.
- Enum can have numeric, string or expression as constant.
- It can't have Boolean value or expression as constant.
- Enum allows auto implementation of values if the type is "number".

Syntax:
    enum Values
    {
        A,                // A=0
        B=20,
        C                // C=21
    }
    Values.A;
    Values.A = 20;    // invalid

- Auto implementation is allows only when the previous value type is a number.
- Enum allows reverse mapping.
- It is a technique of accessing key with reference of value.

Ex:
enum StatusCodes
{
     Client,
     OK = 200,
     Found,
     NotFound = 404,
     Server = "Inernal Server Error",
}
console.log(`${StatusCodes.NotFound}: ${StatusCodes[404]}`);


Ex:

enum StatusCodes
{
    A = 10,
    B = 20,
    C = A + B    
}
console.log(`Addition=${StatusCodes.C}`);

                          Module System
- A module system enables features like
    a) Code Separation
    b) Code Reusability
    c) Extensibility
    d) Maintainability
    e) Testability
- TypeScript uses CommonJS module system.
- A Typescript module comprises of
    a) Contracts
    b) Templates
    c) Components
    d) Functions
    e) Values

Ex:
1. Add folders
    - contracts
    - templates
    - components
    - app

2. contracts
    ProductContract.ts

export interface ProductContract
{
    Name:string;
    Price:number;
    Qty:number;
    Total():number;
    Print():void;
}

3. templates
    ProductTemplate.ts
import { ProductContract } from "../contracts/ProductContract";

export abstract class ProductTemplate implements ProductContract
{
      public Name:string = "";
      public Price:number = 0;
      public Qty: number = 0;
      public abstract Total():number;
      public abstract Print():void;
}

4. components
    ProductComponent.ts

import { ProductTemplate } from "../templates/ProductTemplate";

export class ProductComponent extends ProductTemplate
{
     Name = "Samsung TV";
     Price = 50000;
     Qty = 2;
     Total(){
        return this.Qty * this.Price;
     }
     Print(){
        console.log(`Name=${this.Name}\nPrice=${this.Price}\nQty=${this.Qty}\nTotal=${this.Total()}`);
     }
}

5. app
    Index.ts

import { ProductComponent } from "../components/ProductComponent";

let tv = new ProductComponent();
tv.Print();

 
    D:\..\app> tsc index.ts
             > node index.js