How to use react in existing web application?
1. Install Node JS
2. VS Code
3. Create a project
4. Setup file system for project
5. Enable React in page using CDN	
		a) React
		b) React DOM
		c) Babel 

Install react & babel library for project:



1. Run the following commands in your project terminal 

		>npm  i  react   react-dom   @babel/standalone  --save	[ latest - 19]

		>npm  i  react@18.2  react-dom@18.2  @babel/standalone --save

2. All library files are copied into "node_modules".

3. You web application requires react libraries from "UMD" [Universal Module Distribution] system.
   npm need UMD to run 



4. Link library files to your HTML page.

<head>
<script  src="../node_modules/react/umd/react.development.js"> </script>
<script src="../node_modules/react-dom/umd/react-dom.development.js"> </script>
<script src="../node_modules/@babel/standalone/babel.js"> </script>
</head>

Ex:
home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <script src="../node_modules/react/umd/react.development.js"></script>
    <script src="../node_modules/react-dom/umd/react-dom.development.js"></script>
    <script src="../node_modules/@babel/standalone/babel.js"></script>
    <script type="text/babel">
        ReactDOM.render("Welcome to React", document.getElementById("root"));
    </script>
</head>
<body>
    <h2>Home</h2>
    <noscript>Please enable JavaScript on your browser.</noscript>
    <div id="root"></div>
</body>
</html>

FAQ: What is "ReactDOM" ?
Ans:  It is a property that creates "Virtual DOM" and  "render()" is a method that renders 
	 virtual DOM into actual DOM.

Syntax:
	 ReactDOM.render( <your_component>,  dom_target_element );







					       React Components
- Component is a template with pre-defined design, styles and functionality.
- Design is created using "HTML".
- Styles are configured using "CSS".
- Functionality is defined by using "JavaScript / TypeScript".
- React uses JavaScript Extension known as "JSX".
- React component can be created by using 2 techniques
  1.Class 
  2. Object


	a) JavaScript Class 
    => In JavaScript, a class is a blueprint for creating objects. 
       It provides a way to define the structure and behavior of objects, 
       including their properties and methods.

       * Why function not recomended for creating components in JavaScript.
       - It is not recomended to write Components using Class
       - Classes are heavy lod on application
       - Consume more memory
       - Performence is low

	b) JavaScript Function 
    => In JavaScript, a function is a reusable block of code that performs a specific task. 
       It can take input parameters, perform operations, and return a value. 



JavaScript Functions :

1. What is a Function Declaration?
=> 
A function declaration is a way to define a named function in JavaScript. 
It starts with the function keyword followed by the function name, parentheses () for parameters, 
and curly braces {} to enclose the function's code block.

EX.
function functionName(parameters) {
  // Code block to execute
}

In JavaScript Function declarations are hoisted, 
meaning they can be called before they are defined in the code also.










2. What is a Function Expression?
=>
A function expression involves creating a function and assigning it to a variable. 
It does not have a name unless it's a named function expression.

Unlike function declarations, function expressions are not hoisted, 
meaning you cannot call them before they are defined.

EX.
const functionName = function(parameters) {
  // Code block
};

Function expressions can be anonymous or named.
You cannot call them before their definition.

EX.
// This will throw an error
sayHi("Vikram");

const sayHi = function(name) {
  console.log(`Hi, ${name}!`);
};
Output: Uncaught ReferenceError: Cannot access 'sayHi' before initialization










3. What is Function Definition?
=>
A function definition refers to the creation of a function using either function declaration or function expression.
In JavaScript, functions can be defined in multiple ways.

Types of Function Definitions:

a. Function Declaration

function greet(name) {
  console.log(`Hello, ${name}!`);
}
greet("Vikram");  // Output: Hello, Vikram!


b. Function Expression (Anonymous or Named)

const add = function (a, b) {
  return a + b;
};
console.log(add(2, 3));  // Output: 5


c. Arrow Function (ES6)

const multiply = (a, b) => a * b;
console.log(multiply(4, 5));  // Output: 20


d. Method Definition (Inside Objects)

const calculator = {
  sum(a, b) {
    return a + b;
  }
};
console.log(calculator.sum(2, 3));  // Output: 5


e. Constructor Function (used with new)

function Person(name) {
  this.name = name;
}
const person1 = new Person("Vikram");
console.log(person1.name);  // Output: Vikram















4. What are Function Parameters?
=>
Parameters are placeholders defined in the function declaration or expression. 
They allow you to pass data (arguments) to functions.

function functionName(param1, param2) {
  // Function body using param1 and param2
}

function greet(name, message) {
  console.log(`${message}, ${name}!`);
}

greet("Vikram", "Hello"); // Output: Hello, Vikram!


Key Points:

1. Multiple Parameters: Functions can accept multiple parameters.
=>
function add(a, b, c) {
  return a + b + c;
}
console.log(add(1, 2, 3)); // Output: 6


2. Default Parameters (ES6): Assign default values if no arguments are provided.
=>
function greet(name = "User") {
  console.log(`Hello, ${name}!`);
}
greet();         // Output: Hello, User!
greet("Vikram"); // Output: Hello, Vikram!


3. Rest Parameters (ES6): Collect multiple arguments into an array using ...
=>
function sum(...numbers) {
  return numbers.reduce((acc, num) => acc + num, 0);
}
console.log(sum(1, 2, 3, 4)); // Output: 10


4. Passing Functions as Parameters (Higher-Order Functions)
=>
function executeOperation(a, b, operation) {
  return operation(a, b);
}

function multiply(x, y) {
  return x * y;
}

console.log(executeOperation(2, 3, multiply)); // Output: 6













5. What are Rest Parameters?
=> 
The rest parameter syntax (...) allows a function to accept an indefinite number of arguments as an array. 
This is especially useful when the number of arguments is dynamic.

function functionName(...restParameters) {
  // restParameters is an array
}

function sum(...numbers) {
  return numbers.reduce((acc, num) => acc + num, 0);
}

console.log(sum(1, 2, 3, 4, 5)); // Output: 15

Key Points:

1. Always Last: Rest parameters must come at the end of the parameter list.
=>

function greet(message, ...names) {
  console.log(`${message} ${names.join(", ")}`);
}

greet("Hello", "Vikram", "Nikita", "John");
// Output: Hello Vikram, Nikita, John

2. Difference from Arguments Object:
=>
Arguments is an array-like object in older functions but lacks array methods.
Rest parameters are real arrays and have access to all array methods.

Invalid Example
This will throw a syntax error because ...rest is not the last parameter:
=>
function incorrect(...rest, message) {
  console.log(message, rest);
}
// ❌ Syntax Error: Rest parameter must be last formal parameter



* Dynamic Operations
=>
function calculate(operation, ...numbers) {
  if (operation === "sum") return numbers.reduce((a, b) => a + b, 0);
  if (operation === "multiply") return numbers.reduce((a, b) => a * b, 1);
  return "Invalid operation";
}

console.log(calculate("sum", 1, 2, 3));      // Output: 6
console.log(calculate("multiply", 2, 3, 4)); // Output: 24










6. What is the Spread Operator?
=>
The spread operator (...) allows you to expand or "spread" elements 
of arrays, objects, or iterable data into individual elements.

Syntax : ...iterable


Key Use Cases :

1️⃣ Copying Arrays
=>
const arr1 = [1, 2, 3];
const arr2 = [...arr1]; // Creates a shallow copy

console.log(arr2); // Output: [1, 2, 3]

arr2.push(4);
console.log(arr1); // Output: [1, 2, 3] (Original array is unchanged)


2️⃣ Merging Arrays
=>
const arr1 = [1, 2];
const arr2 = [3, 4];
const merged = [...arr1, ...arr2];

console.log(merged); // Output: [1, 2, 3, 4]


3️⃣ Spreading Elements in Function Calls
=>
function sum(a, b, c) {
  return a + b + c;
}

const numbers = [1, 2, 3];
console.log(sum(...numbers)); // Output: 6


4️⃣ Copying and Merging Objects (ES6+)
=>
const person = { name: "Vikram", age: 22 };
const updatedPerson = { ...person, profession: "Developer" };

console.log(updatedPerson);
// Output: { name: 'Vikram', age: 22, profession: 'Developer' }







- Function Closure 
- Function Return 
- Function Currying 
- Higher Order Functions 
- Function Recursion
- Function Signature 
- Function Generator
- Function Call back
- Function Promise 
- Async Functions
- Anonymous Functions 
- IIFE Pattern
- Arrow Functions

Function Component Rules:
1. A component function can't be void.
2. A component function must return JSX element. 
3. Component function name must start with Uppercase letter. 
4. Component JSX must return only one fragment. 
5. Every element in component must have an end token.
		<img> </img>
		<img />
		<input type="text">  </input>
		<input type="text" />

Syntax:
	 function   Component()
	 {
	   return (
			<fragment>

			</fragment>
		      );
	 }

- Component is accessed and used as a token  "<Component />".

Ex:
home.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Home</title>
    <style>
        form {
            border: 1px solid gray;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 2px 2px 2px black;
            width: 200px;
            margin: 20px;
        }
        nav {
            display: flex;
            justify-content: space-between;
            border: 1px solid gray;
            padding: 20px;
        }
        footer {
            background-color: black;
            color:white;
            text-align: center;
            padding: 10px;
        }
    </style>
    <script src="../node_modules/react/umd/react.development.js"></script>
    <script src="../node_modules/react-dom/umd/react-dom.development.js"></script>
    <script src="../node_modules/@babel/standalone/babel.js"></script>
    <script type="text/babel">
        
        function Login()
        {
            return (
                <form>
                    <h3>User Login</h3>
                    <dl>
                        <dt>User Name</dt> 
                        <dd><input type="text" /></dd>
                        <dt>Password </dt> 
                        <dd><input type="password"/> </dd> 
                    </dl>
                    <button>Login</button>
                </form>
            );
        }

        const SearchBar = ()=> (
            <div>
                <input type="text" placeholder="Search Netflix.in" />
                <button>Search</button>
            </div>
        )

        const Navbar = () => (
            <nav>
                <div>Netflix</div>
                <div>
                    <SearchBar />
                </div>
                <div> 
                  <select>
                    <option>Language</option>
                    <option>English</option>
                  </select>    
                  <button>Sign In</button>
                </div>
            </nav>
        )

        function Footer()
        {
            return(
                <footer>
                    &copy; 2025  All right reserved for Netflix
                </footer>
            )
        }

        ReactDOM.render(<section> <Navbar/> <Login/>  <Footer /> </section>, document.getElementById("root"));
    </script>
</head>
<body>
    <noscript>Please enable JavaScript on your browser.</noscript>
    <div id="root"></div>
</body>
</html>










